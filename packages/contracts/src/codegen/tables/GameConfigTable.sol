// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct GameConfigTableData {
  bool active;
  address admin;
  address gm;
  address currencyProxy;
  address itemProxy;
  address entityProxy;
  uint256 voidsUpgradeBase;
  uint256 voidsUpgradePower;
}

library GameConfigTable {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "game", name: "GameConfigTable", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746267616d650000000000000000000047616d65436f6e6669675461626c6500);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00a5080001141414141420200000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool, address, address, address, address, address, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00a508006061616161611f1f0000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "active";
    fieldNames[1] = "admin";
    fieldNames[2] = "gm";
    fieldNames[3] = "currencyProxy";
    fieldNames[4] = "itemProxy";
    fieldNames[5] = "entityProxy";
    fieldNames[6] = "voidsUpgradeBase";
    fieldNames[7] = "voidsUpgradePower";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get active.
   */
  function getActive() internal view returns (bool active) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get active.
   */
  function _getActive() internal view returns (bool active) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set active.
   */
  function setActive(bool active) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((active)), _fieldLayout);
  }

  /**
   * @notice Set active.
   */
  function _setActive(bool active) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((active)), _fieldLayout);
  }

  /**
   * @notice Get admin.
   */
  function getAdmin() internal view returns (address admin) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get admin.
   */
  function _getAdmin() internal view returns (address admin) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set admin.
   */
  function setAdmin(address admin) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((admin)), _fieldLayout);
  }

  /**
   * @notice Set admin.
   */
  function _setAdmin(address admin) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((admin)), _fieldLayout);
  }

  /**
   * @notice Get gm.
   */
  function getGm() internal view returns (address gm) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get gm.
   */
  function _getGm() internal view returns (address gm) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set gm.
   */
  function setGm(address gm) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((gm)), _fieldLayout);
  }

  /**
   * @notice Set gm.
   */
  function _setGm(address gm) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((gm)), _fieldLayout);
  }

  /**
   * @notice Get currencyProxy.
   */
  function getCurrencyProxy() internal view returns (address currencyProxy) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get currencyProxy.
   */
  function _getCurrencyProxy() internal view returns (address currencyProxy) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set currencyProxy.
   */
  function setCurrencyProxy(address currencyProxy) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((currencyProxy)), _fieldLayout);
  }

  /**
   * @notice Set currencyProxy.
   */
  function _setCurrencyProxy(address currencyProxy) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((currencyProxy)), _fieldLayout);
  }

  /**
   * @notice Get itemProxy.
   */
  function getItemProxy() internal view returns (address itemProxy) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get itemProxy.
   */
  function _getItemProxy() internal view returns (address itemProxy) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set itemProxy.
   */
  function setItemProxy(address itemProxy) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((itemProxy)), _fieldLayout);
  }

  /**
   * @notice Set itemProxy.
   */
  function _setItemProxy(address itemProxy) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((itemProxy)), _fieldLayout);
  }

  /**
   * @notice Get entityProxy.
   */
  function getEntityProxy() internal view returns (address entityProxy) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get entityProxy.
   */
  function _getEntityProxy() internal view returns (address entityProxy) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set entityProxy.
   */
  function setEntityProxy(address entityProxy) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((entityProxy)), _fieldLayout);
  }

  /**
   * @notice Set entityProxy.
   */
  function _setEntityProxy(address entityProxy) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((entityProxy)), _fieldLayout);
  }

  /**
   * @notice Get voidsUpgradeBase.
   */
  function getVoidsUpgradeBase() internal view returns (uint256 voidsUpgradeBase) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get voidsUpgradeBase.
   */
  function _getVoidsUpgradeBase() internal view returns (uint256 voidsUpgradeBase) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set voidsUpgradeBase.
   */
  function setVoidsUpgradeBase(uint256 voidsUpgradeBase) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((voidsUpgradeBase)), _fieldLayout);
  }

  /**
   * @notice Set voidsUpgradeBase.
   */
  function _setVoidsUpgradeBase(uint256 voidsUpgradeBase) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((voidsUpgradeBase)), _fieldLayout);
  }

  /**
   * @notice Get voidsUpgradePower.
   */
  function getVoidsUpgradePower() internal view returns (uint256 voidsUpgradePower) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get voidsUpgradePower.
   */
  function _getVoidsUpgradePower() internal view returns (uint256 voidsUpgradePower) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set voidsUpgradePower.
   */
  function setVoidsUpgradePower(uint256 voidsUpgradePower) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((voidsUpgradePower)), _fieldLayout);
  }

  /**
   * @notice Set voidsUpgradePower.
   */
  function _setVoidsUpgradePower(uint256 voidsUpgradePower) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((voidsUpgradePower)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (GameConfigTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (GameConfigTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bool active,
    address admin,
    address gm,
    address currencyProxy,
    address itemProxy,
    address entityProxy,
    uint256 voidsUpgradeBase,
    uint256 voidsUpgradePower
  ) internal {
    bytes memory _staticData = encodeStatic(
      active,
      admin,
      gm,
      currencyProxy,
      itemProxy,
      entityProxy,
      voidsUpgradeBase,
      voidsUpgradePower
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bool active,
    address admin,
    address gm,
    address currencyProxy,
    address itemProxy,
    address entityProxy,
    uint256 voidsUpgradeBase,
    uint256 voidsUpgradePower
  ) internal {
    bytes memory _staticData = encodeStatic(
      active,
      admin,
      gm,
      currencyProxy,
      itemProxy,
      entityProxy,
      voidsUpgradeBase,
      voidsUpgradePower
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(GameConfigTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.active,
      _table.admin,
      _table.gm,
      _table.currencyProxy,
      _table.itemProxy,
      _table.entityProxy,
      _table.voidsUpgradeBase,
      _table.voidsUpgradePower
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(GameConfigTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.active,
      _table.admin,
      _table.gm,
      _table.currencyProxy,
      _table.itemProxy,
      _table.entityProxy,
      _table.voidsUpgradeBase,
      _table.voidsUpgradePower
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      bool active,
      address admin,
      address gm,
      address currencyProxy,
      address itemProxy,
      address entityProxy,
      uint256 voidsUpgradeBase,
      uint256 voidsUpgradePower
    )
  {
    active = (_toBool(uint8(Bytes.getBytes1(_blob, 0))));

    admin = (address(Bytes.getBytes20(_blob, 1)));

    gm = (address(Bytes.getBytes20(_blob, 21)));

    currencyProxy = (address(Bytes.getBytes20(_blob, 41)));

    itemProxy = (address(Bytes.getBytes20(_blob, 61)));

    entityProxy = (address(Bytes.getBytes20(_blob, 81)));

    voidsUpgradeBase = (uint256(Bytes.getBytes32(_blob, 101)));

    voidsUpgradePower = (uint256(Bytes.getBytes32(_blob, 133)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (GameConfigTableData memory _table) {
    (
      _table.active,
      _table.admin,
      _table.gm,
      _table.currencyProxy,
      _table.itemProxy,
      _table.entityProxy,
      _table.voidsUpgradeBase,
      _table.voidsUpgradePower
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool active,
    address admin,
    address gm,
    address currencyProxy,
    address itemProxy,
    address entityProxy,
    uint256 voidsUpgradeBase,
    uint256 voidsUpgradePower
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(active, admin, gm, currencyProxy, itemProxy, entityProxy, voidsUpgradeBase, voidsUpgradePower);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool active,
    address admin,
    address gm,
    address currencyProxy,
    address itemProxy,
    address entityProxy,
    uint256 voidsUpgradeBase,
    uint256 voidsUpgradePower
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      active,
      admin,
      gm,
      currencyProxy,
      itemProxy,
      entityProxy,
      voidsUpgradeBase,
      voidsUpgradePower
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
