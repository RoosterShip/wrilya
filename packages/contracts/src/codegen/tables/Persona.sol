// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { Race } from "./../common.sol";

struct PersonaData {
  Race race;
  uint8 armor;
  uint8 engines;
  uint8 leadership;
  uint8 navigation;
  uint8 negotiation;
  uint8 repairs;
  uint8 sensors;
  uint8 shields;
  uint8 weapons;
  string name;
}

library Persona {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Persona", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000506572736f6e61000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x000a0a0101010101010101010101000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, uint8, string)
  Schema constant _valueSchema = Schema.wrap(0x000a0a0100000000000000000000c50000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "entity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](11);
    fieldNames[0] = "race";
    fieldNames[1] = "armor";
    fieldNames[2] = "engines";
    fieldNames[3] = "leadership";
    fieldNames[4] = "navigation";
    fieldNames[5] = "negotiation";
    fieldNames[6] = "repairs";
    fieldNames[7] = "sensors";
    fieldNames[8] = "shields";
    fieldNames[9] = "weapons";
    fieldNames[10] = "name";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get race.
   */
  function getRace(bytes32 entity) internal view returns (Race race) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return Race(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get race.
   */
  function _getRace(bytes32 entity) internal view returns (Race race) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return Race(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set race.
   */
  function setRace(bytes32 entity, Race race) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(race)), _fieldLayout);
  }

  /**
   * @notice Set race.
   */
  function _setRace(bytes32 entity, Race race) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(race)), _fieldLayout);
  }

  /**
   * @notice Get armor.
   */
  function getArmor(bytes32 entity) internal view returns (uint8 armor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get armor.
   */
  function _getArmor(bytes32 entity) internal view returns (uint8 armor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set armor.
   */
  function setArmor(bytes32 entity, uint8 armor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((armor)), _fieldLayout);
  }

  /**
   * @notice Set armor.
   */
  function _setArmor(bytes32 entity, uint8 armor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((armor)), _fieldLayout);
  }

  /**
   * @notice Get engines.
   */
  function getEngines(bytes32 entity) internal view returns (uint8 engines) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get engines.
   */
  function _getEngines(bytes32 entity) internal view returns (uint8 engines) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set engines.
   */
  function setEngines(bytes32 entity, uint8 engines) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((engines)), _fieldLayout);
  }

  /**
   * @notice Set engines.
   */
  function _setEngines(bytes32 entity, uint8 engines) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((engines)), _fieldLayout);
  }

  /**
   * @notice Get leadership.
   */
  function getLeadership(bytes32 entity) internal view returns (uint8 leadership) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get leadership.
   */
  function _getLeadership(bytes32 entity) internal view returns (uint8 leadership) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set leadership.
   */
  function setLeadership(bytes32 entity, uint8 leadership) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((leadership)), _fieldLayout);
  }

  /**
   * @notice Set leadership.
   */
  function _setLeadership(bytes32 entity, uint8 leadership) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((leadership)), _fieldLayout);
  }

  /**
   * @notice Get navigation.
   */
  function getNavigation(bytes32 entity) internal view returns (uint8 navigation) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get navigation.
   */
  function _getNavigation(bytes32 entity) internal view returns (uint8 navigation) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set navigation.
   */
  function setNavigation(bytes32 entity, uint8 navigation) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((navigation)), _fieldLayout);
  }

  /**
   * @notice Set navigation.
   */
  function _setNavigation(bytes32 entity, uint8 navigation) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((navigation)), _fieldLayout);
  }

  /**
   * @notice Get negotiation.
   */
  function getNegotiation(bytes32 entity) internal view returns (uint8 negotiation) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get negotiation.
   */
  function _getNegotiation(bytes32 entity) internal view returns (uint8 negotiation) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set negotiation.
   */
  function setNegotiation(bytes32 entity, uint8 negotiation) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((negotiation)), _fieldLayout);
  }

  /**
   * @notice Set negotiation.
   */
  function _setNegotiation(bytes32 entity, uint8 negotiation) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((negotiation)), _fieldLayout);
  }

  /**
   * @notice Get repairs.
   */
  function getRepairs(bytes32 entity) internal view returns (uint8 repairs) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get repairs.
   */
  function _getRepairs(bytes32 entity) internal view returns (uint8 repairs) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set repairs.
   */
  function setRepairs(bytes32 entity, uint8 repairs) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((repairs)), _fieldLayout);
  }

  /**
   * @notice Set repairs.
   */
  function _setRepairs(bytes32 entity, uint8 repairs) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((repairs)), _fieldLayout);
  }

  /**
   * @notice Get sensors.
   */
  function getSensors(bytes32 entity) internal view returns (uint8 sensors) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get sensors.
   */
  function _getSensors(bytes32 entity) internal view returns (uint8 sensors) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set sensors.
   */
  function setSensors(bytes32 entity, uint8 sensors) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((sensors)), _fieldLayout);
  }

  /**
   * @notice Set sensors.
   */
  function _setSensors(bytes32 entity, uint8 sensors) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((sensors)), _fieldLayout);
  }

  /**
   * @notice Get shields.
   */
  function getShields(bytes32 entity) internal view returns (uint8 shields) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get shields.
   */
  function _getShields(bytes32 entity) internal view returns (uint8 shields) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set shields.
   */
  function setShields(bytes32 entity, uint8 shields) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((shields)), _fieldLayout);
  }

  /**
   * @notice Set shields.
   */
  function _setShields(bytes32 entity, uint8 shields) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((shields)), _fieldLayout);
  }

  /**
   * @notice Get weapons.
   */
  function getWeapons(bytes32 entity) internal view returns (uint8 weapons) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get weapons.
   */
  function _getWeapons(bytes32 entity) internal view returns (uint8 weapons) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set weapons.
   */
  function setWeapons(bytes32 entity, uint8 weapons) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((weapons)), _fieldLayout);
  }

  /**
   * @notice Set weapons.
   */
  function _setWeapons(bytes32 entity, uint8 weapons) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((weapons)), _fieldLayout);
  }

  /**
   * @notice Get name.
   */
  function getName(bytes32 entity) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get name.
   */
  function _getName(bytes32 entity) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set name.
   */
  function setName(bytes32 entity, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Set name.
   */
  function _setName(bytes32 entity, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Get the length of name.
   */
  function lengthName(bytes32 entity) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of name.
   */
  function _lengthName(bytes32 entity) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemName(bytes32 entity, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemName(bytes32 entity, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to name.
   */
  function pushName(bytes32 entity, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to name.
   */
  function _pushName(bytes32 entity, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from name.
   */
  function popName(bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from name.
   */
  function _popName(bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function updateName(bytes32 entity, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function _updateName(bytes32 entity, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 entity) internal view returns (PersonaData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 entity) internal view returns (PersonaData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 entity,
    Race race,
    uint8 armor,
    uint8 engines,
    uint8 leadership,
    uint8 navigation,
    uint8 negotiation,
    uint8 repairs,
    uint8 sensors,
    uint8 shields,
    uint8 weapons,
    string memory name
  ) internal {
    bytes memory _staticData = encodeStatic(
      race,
      armor,
      engines,
      leadership,
      navigation,
      negotiation,
      repairs,
      sensors,
      shields,
      weapons
    );

    EncodedLengths _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 entity,
    Race race,
    uint8 armor,
    uint8 engines,
    uint8 leadership,
    uint8 navigation,
    uint8 negotiation,
    uint8 repairs,
    uint8 sensors,
    uint8 shields,
    uint8 weapons,
    string memory name
  ) internal {
    bytes memory _staticData = encodeStatic(
      race,
      armor,
      engines,
      leadership,
      navigation,
      negotiation,
      repairs,
      sensors,
      shields,
      weapons
    );

    EncodedLengths _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 entity, PersonaData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.race,
      _table.armor,
      _table.engines,
      _table.leadership,
      _table.navigation,
      _table.negotiation,
      _table.repairs,
      _table.sensors,
      _table.shields,
      _table.weapons
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name);
    bytes memory _dynamicData = encodeDynamic(_table.name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 entity, PersonaData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.race,
      _table.armor,
      _table.engines,
      _table.leadership,
      _table.navigation,
      _table.negotiation,
      _table.repairs,
      _table.sensors,
      _table.shields,
      _table.weapons
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name);
    bytes memory _dynamicData = encodeDynamic(_table.name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      Race race,
      uint8 armor,
      uint8 engines,
      uint8 leadership,
      uint8 navigation,
      uint8 negotiation,
      uint8 repairs,
      uint8 sensors,
      uint8 shields,
      uint8 weapons
    )
  {
    race = Race(uint8(Bytes.getBytes1(_blob, 0)));

    armor = (uint8(Bytes.getBytes1(_blob, 1)));

    engines = (uint8(Bytes.getBytes1(_blob, 2)));

    leadership = (uint8(Bytes.getBytes1(_blob, 3)));

    navigation = (uint8(Bytes.getBytes1(_blob, 4)));

    negotiation = (uint8(Bytes.getBytes1(_blob, 5)));

    repairs = (uint8(Bytes.getBytes1(_blob, 6)));

    sensors = (uint8(Bytes.getBytes1(_blob, 7)));

    shields = (uint8(Bytes.getBytes1(_blob, 8)));

    weapons = (uint8(Bytes.getBytes1(_blob, 9)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory name) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (PersonaData memory _table) {
    (
      _table.race,
      _table.armor,
      _table.engines,
      _table.leadership,
      _table.navigation,
      _table.negotiation,
      _table.repairs,
      _table.sensors,
      _table.shields,
      _table.weapons
    ) = decodeStatic(_staticData);

    (_table.name) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    Race race,
    uint8 armor,
    uint8 engines,
    uint8 leadership,
    uint8 navigation,
    uint8 negotiation,
    uint8 repairs,
    uint8 sensors,
    uint8 shields,
    uint8 weapons
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(race, armor, engines, leadership, navigation, negotiation, repairs, sensors, shields, weapons);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(string memory name) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(name).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(string memory name) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((name)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    Race race,
    uint8 armor,
    uint8 engines,
    uint8 leadership,
    uint8 navigation,
    uint8 negotiation,
    uint8 repairs,
    uint8 sensors,
    uint8 shields,
    uint8 weapons,
    string memory name
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      race,
      armor,
      engines,
      leadership,
      navigation,
      negotiation,
      repairs,
      sensors,
      shields,
      weapons
    );

    EncodedLengths _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 entity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    return _keyTuple;
  }
}
