// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { OperationEnum } from "./../common.sol";

library NotificationTable {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "game", name: "NotificationTabl", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f7467616d65000000000000000000004e6f74696669636174696f6e5461626c);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0001010101000000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, bytes)
  Schema constant _valueSchema = Schema.wrap(0x0001010100c40000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "opID";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](2);
    fieldNames[0] = "operation";
    fieldNames[1] = "data";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set operation.
   */
  function setOperation(bytes32 opID, OperationEnum operation) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = opID;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(operation)), _fieldLayout);
  }

  /**
   * @notice Set operation.
   */
  function _setOperation(bytes32 opID, OperationEnum operation) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = opID;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(operation)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 opID, OperationEnum operation, bytes memory data) internal {
    bytes memory _staticData = encodeStatic(operation);

    EncodedLengths _encodedLengths = encodeLengths(data);
    bytes memory _dynamicData = encodeDynamic(data);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = opID;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(bytes32 opID, OperationEnum operation, bytes memory data) internal {
    bytes memory _staticData = encodeStatic(operation);

    EncodedLengths _encodedLengths = encodeLengths(data);
    bytes memory _dynamicData = encodeDynamic(data);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = opID;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (OperationEnum operation) {
    operation = OperationEnum(uint8(Bytes.getBytes1(_blob, 0)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(EncodedLengths _encodedLengths, bytes memory _blob) internal pure returns (bytes memory data) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    data = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (OperationEnum operation, bytes memory data) {
    (operation) = decodeStatic(_staticData);

    (data) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 opID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = opID;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 opID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = opID;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(OperationEnum operation) internal pure returns (bytes memory) {
    return abi.encodePacked(operation);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(bytes memory data) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(data).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(bytes memory data) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((data)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    OperationEnum operation,
    bytes memory data
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(operation);

    EncodedLengths _encodedLengths = encodeLengths(data);
    bytes memory _dynamicData = encodeDynamic(data);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 opID) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = opID;

    return _keyTuple;
  }
}
